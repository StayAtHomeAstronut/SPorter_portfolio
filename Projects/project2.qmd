---
title: "Client Report - Late Flights and Missing Data"
subtitle: "Course DS 250"
author: "Sean Porter"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
```

## Elevator pitch

Do you like to travel? In this report, we unveil key metrics designed to empower you in navigating airport delays more effectively. Uncover insights on the worst airports to fly from and the best months to travel, gaining valuable knowledge to prepare for unforeseen challenges. Armed with these metrics, travelers can make informed choices, ensuring a more reliable and enjoyable travel experience.

```{python}
#| label: project data
#| code-summary: Read and format project data

df = pd.read_json("https://raw.githubusercontent.com/byuidatascience/data4missing/master/data-raw/flights_missing/flights_missing.json")
```

## Making the Data Consistent

Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”). In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the “NaN” for at least one missing value.

The missing data in the dataset has been standardized to display 'NaN' where no data is present. This simplifies the interpretation of missing values across all columns. Here, we see data from the Atlanta, Georgia airport in the year 2005. In the unedited dataset, there is no specific value for "num_of_delays_late_aircraft," this missing value has been automatically updated to 'NaN.'

When developing this project, I also discovered that there was a typo in the dataset, and the month "February" was listed as "Febuary." When standardizing the data, I corrected this typo.

```{python}

# Replace all missing data types with NaN.

# Note: This can't just be a string. It needs to be numpy value related to "Not a Number," which will ensure the data can be read by Python later.

df.replace({-999: np.NaN, '': np.NaN, 'missing': np.NaN, 'NA': np.NaN}, inplace=True)

# Replace "Febuary" with "February" in the 'month' column

df['month'] = df['month'].replace('Febuary', 'February')

# Display one record example in raw JSON format
example_record = df.iloc[0].to_dict()

# Print the example record
print(example_record)

```

## The Worst Airport

Which airport has the worst delays? Discuss the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.

To determine which airport had the most signifigant delays, two metrics were considered: 'Proportion of Delayed Flights,' indicating the percentage of flights experiencing delays to total flights, and 'Average Delay Time,' representing the typical duration of delays. These metrics were combined into a 'Weighted Delay Rate,' calculated as a mathematically balanced average of the two factors. The weighted approach gives equal importance to both the frequency and duration of delays. The resulting 'Weighted Delay Rate' identifies airports with the most significant overall delays.

When considering these metrics together, San Francisco International Airport takes the title of worst airport for delays. Travellers can expect over 26% of total flights to be delayed with an average wait time of just under 1 hour 10 minutes.

```{python}

# Calculate Proportion of Delayed Flights
proportion_delayed_table = df.groupby('airport_code').agg({
    'num_of_flights_total': 'sum',
    'num_of_delays_total': 'sum'
}).reset_index()

proportion_delayed_table['proportion_delayed'] = (proportion_delayed_table['num_of_delays_total'] / proportion_delayed_table['num_of_flights_total']) * 100

# Sort by proportion of delayed flights in descending order
proportion_delayed_table = proportion_delayed_table.sort_values(by='proportion_delayed', ascending=False)

# Calculate Average Delay Time
average_delay_time_table = df.groupby('airport_code').agg({
    'num_of_delays_total': 'sum',
    'minutes_delayed_total': 'sum'
}).reset_index()

average_delay_time_table['average_delay_hours'] = average_delay_time_table['minutes_delayed_total'] / (average_delay_time_table['num_of_delays_total'] * 60)

# Sort by average delay time in descending order
average_delay_time_table = average_delay_time_table.sort_values(by='average_delay_hours', ascending=False)

# Merge the two summary tables on 'airport_code'
combined_data = pd.merge(proportion_delayed_table, average_delay_time_table, on='airport_code', suffixes=('_proportion', '_average'))

# Calculate a weighted metric for delay rate
combined_data['weighted_delay_rate'] = 0.5 * combined_data['proportion_delayed'] + 0.5 * combined_data['average_delay_hours']      

# Sort by the weighted delay rate in descending order
combined_data = combined_data.sort_values(by='weighted_delay_rate', ascending=False)

```

```{python}

# Create a bar graph for Weighted Delay Rate
fig_weighted_delay_rate = px.bar(
    combined_data,
    x='airport_code',
    y='weighted_delay_rate',
    title='Weighted Delay Rate by Airport',
    labels={'weighted_delay_rate': 'Weighted Delay Rate'},
    height=500
)

fig_weighted_delay_rate.show()

```

```{python}

# Format columns to display with 2 decimal points
proportion_delayed_table['proportion_delayed'] = proportion_delayed_table['proportion_delayed'].round(2)
average_delay_time_table['average_delay_hours'] = average_delay_time_table['average_delay_hours'].round(2)
combined_data['weighted_delay_rate'] = combined_data['weighted_delay_rate'].round(2)

# Create a table for Proportion of Delayed Flights with additional metrics
table_proportion_delayed = go.Figure(data=[go.Table(
    header=dict(values=['Airport Code', 'Total Flights', 'Total Delayed Flights', 'Proportion Delayed (%)', 'Total Delay Time (minutes)', 'Average Delay Time (hours)', 'Weighted Delay Rate']),
    cells=dict(values=[
        proportion_delayed_table['airport_code'],
        proportion_delayed_table['num_of_flights_total'],
        proportion_delayed_table['num_of_delays_total'],
        proportion_delayed_table['proportion_delayed'],
        average_delay_time_table['minutes_delayed_total'],
        average_delay_time_table['average_delay_hours'],
        combined_data['weighted_delay_rate']
    ])
)])

table_proportion_delayed.update_layout(title='Summary Table: Delay Metrics')

table_proportion_delayed.show()

```

## The Best Month To Fly

What is the best month to fly if you want to avoid delays of any length? Discuss the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the Month variable.)

To determine the best month to fly, the "Proportion of Delayed Flights" metric, A percentage of delayed flights to total flights, was considered on a month-by-month basis, taking into account metrics from every airport. The data suggests that the best month to fly is September.

```{python}

# Remove rows with missing Month variable
df_cleaned = df.dropna(subset=['month'])
df_cleaned = df_cleaned[df_cleaned['month'].notna() & (df_cleaned['month'] != 'null')]

# Calculate Proportion of Delayed Flights by month
proportion_delayed_by_month = df_cleaned.groupby('month').agg({
    'num_of_flights_total': 'sum',
    'num_of_delays_total': 'sum'
}).reset_index()

proportion_delayed_by_month['proportion_delayed'] = (proportion_delayed_by_month['num_of_delays_total'] / proportion_delayed_by_month['num_of_flights_total']) * 100

# Order months
months_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
proportion_delayed_by_month['month'] = pd.Categorical(proportion_delayed_by_month['month'], categories=months_order, ordered=True)
proportion_delayed_by_month = proportion_delayed_by_month.sort_values('month')

# Create a bar chart
fig_proportion_delayed = px.bar(
    proportion_delayed_by_month,
    x='month',
    y='proportion_delayed',
    title='Proportion of Delayed Flights by Month',
    labels={'proportion_delayed': 'Proportion of Delayed Flights (%)'},
    category_orders={'month': months_order}
)

fig_proportion_delayed.show()

```


```{python}

# Filter out null values in the 'month' column when creating the table
#This part took a lot of work.
proportion_delayed_by_month = proportion_delayed_by_month[proportion_delayed_by_month['month'].notna()]

# Format columns to display with 2 decimal points
proportion_delayed_by_month['proportion_delayed'] = proportion_delayed_by_month['proportion_delayed'].round(2)

# Create a table for Proportion of Delayed Flights
table_proportion_delayed = go.Figure(data=[go.Table(
    header=dict(values=['Month', 'Total Flights', 'Total Delayed Flights', 'Proportion of Delayed Flights (%)']),
    cells=dict(values=[
        proportion_delayed_by_month['month'],
        proportion_delayed_by_month['num_of_flights_total'],
        proportion_delayed_by_month['num_of_delays_total'],
        proportion_delayed_by_month['proportion_delayed']
    ])
)])

table_proportion_delayed.update_layout(title='Summary Table: Delay Metrics')

table_proportion_delayed.show()

```

## Ensuring Accurate Data For Weather Delays

According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild). You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations: 100% of delayed flights in the Weather category are due to weather. 30% of all delayed flights in the Late-Arriving category are due to weather. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%.

The following logic calculates the total number of flights delayed by weather according to the constraints listed above. All missing values in the Late Aircraft variable are replaced with the mean. The first five rows are displayed in a table.

```{python}

# Replace missing values in the Late Aircraft variable with the mean
df['num_of_delays_late_aircraft'].fillna(df['num_of_delays_late_aircraft'].mean(), inplace=True)

# Calculate total number of flights delayed by weather
df['weather_delayed'] = 0  # Make a new column

# 100% of delayed flights in the Weather category are due to weather
df.loc[df['num_of_delays_weather'] > 0, 'weather_delayed'] += df['num_of_delays_weather']

# 30% of all delayed flights in the Late-Arriving category are due to weather
df['weather_delayed'] += 0.3 * df['num_of_delays_late_aircraft']

# From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%.
df['weather_delayed'] += np.where(df['month'].isin(['April', 'May', 'June', 'July', 'August']),
                                  0.4 * df['num_of_delays_nas'],
                                  0.65 * df['num_of_delays_nas'])

# Print the first 5 rows of the modified dataset in a table
table_first_5_rows = go.Figure(data=[go.Table(
    header=dict(values=df.columns),
    cells=dict(values=df.head().transpose().values)
)])

table_first_5_rows.update_layout(title='First 5 Rows of Modified Dataset')

table_first_5_rows.show()

```

## How Many Delays Are Due To Weather

Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Discuss what you learn from this graph.

Now that we have accurate data to determine weather delays, we find that over a quarter of all delayed flights are caused or influenced by weather conditions. The proportion hovers around the 30-35% mark for most airports. certain airports, such as San Francisco and Chicago International Airports, stand out as having a more pronounced influence of local weather conditions on flight delays. These airports experience a higher percentage of delays attributed to weather, making them notable locations where travelers might encounter delays related to weather.

```{python}

# Calculate the proportion of all flights delayed by weather at each airport
weather_proportion_by_airport = df.groupby('airport_code').agg({
    'num_of_delays_total': 'sum',
    'weather_delayed': 'sum'
}).reset_index()

# Calculate the proportion of flights delayed by weather
weather_proportion_by_airport['proportion_delayed_by_weather'] = (
    weather_proportion_by_airport['weather_delayed'] / weather_proportion_by_airport['num_of_delays_total']
) * 100

# Create a barplot
fig_weather_proportion = go.Figure()

# Add bar for the total number of delayed flights
fig_weather_proportion.add_trace(go.Bar(
    x=weather_proportion_by_airport['airport_code'],
    y=weather_proportion_by_airport['num_of_delays_total'],
    name='Total Delayed Flights',
    marker_color='blue'
))

# Add bar for the total number of flights delayed by weather
fig_weather_proportion.add_trace(go.Bar(
    x=weather_proportion_by_airport['airport_code'],
    y=weather_proportion_by_airport['weather_delayed'],
    name='Flights Delayed by Weather',
    marker_color='red'
))

fig_weather_proportion.update_layout(
    title='Total Number of Delayed Flights Compared to Flights Delayed by Weather',
    xaxis_title='Airport Code',
    yaxis_title='Number of Flights',
    barmode='group',
    height=500
)

fig_weather_proportion.show()

```

```{python}

# Calculate the total number of delayed flights, total number of flights, and the proportion of delayed flights by airport
weather_proportion_by_airport = df.groupby('airport_code').agg({
    'num_of_delays_total': 'sum',
    'weather_delayed': 'sum'
}).reset_index()

# Calculate the proportion of flights delayed by weather
weather_proportion_by_airport['proportion_delayed_by_weather'] = (
    (weather_proportion_by_airport['weather_delayed'] / weather_proportion_by_airport['num_of_delays_total']) * 100
).round(2)

# Round 'Flights Delayed by Weather' to the nearest whole number
weather_proportion_by_airport['weather_delayed'] = round(weather_proportion_by_airport['weather_delayed'])

# Create a table for Weather Delays by Airport
table_weather_delays = go.Figure(data=[go.Table(
    header=dict(values=['Airport Code', 'Total Delayed Flights', 'Flights Delayed by Weather', 'Proportion of Flights Delayed by Weather (%)']),
    cells=dict(values=[
        weather_proportion_by_airport['airport_code'],
        weather_proportion_by_airport['num_of_delays_total'],
        weather_proportion_by_airport['weather_delayed'],
        weather_proportion_by_airport['proportion_delayed_by_weather']
    ])
)])

table_weather_delays.update_layout(title='Weather Delays by Airport')

table_weather_delays.show()

```


